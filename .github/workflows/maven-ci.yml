name: Maven Multi-Service Docker CI/CD

on:
  push:
    branches:
      - main
  #pull_request:
   # branches:
    #  - main

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_TAG: latest # 使用固定标签以覆盖旧镜像

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: 构建所有服务
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建并推送 Gateway Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: gateway/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/gateway:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=gateway-build
          cache-to: type=gha,scope=gateway-build,mode=max

      - name: 构建并推送 Service Order Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: services/service-order/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-order:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=service-order-build
          cache-to: type=gha,scope=service-order-build,mode=max

      - name: 构建并推送 Service Product Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: services/service-product/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-product:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=service-product-build
          cache-to: type=gha,scope=service-product-build,mode=max

  deploy-gateway:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 调试：检查环境和保存脚本
        shell: pwsh
        run: |
          Write-Host "工作目录: $PWD"
          Write-Host "PowerShell 版本: $($PSVersionTable.PSVersion)"
          

      - name: 拉取并运行 Gateway Docker 镜像
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/gateway:${{ env.IMAGE_TAG }}"
          $CONTAINER_NAME = "cloud-demo-gateway-container"
          $PORT_MAP = "80:8080"

          Write-Host "--- 部署 Gateway ---"
          Write-Host "镜像: $IMAGE_TAG"
          Write-Host "容器: $CONTAINER_NAME"
          Write-Host "端口: $PORT_MAP"

          Write-Host "拉取镜像..."
          docker pull $IMAGE_TAG || { Write-Host "拉取失败"; exit 1 }
          Write-Host "拉取成功"

          Write-Host "检查容器..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists -eq $CONTAINER_NAME) { docker stop $CONTAINER_NAME; docker rm $CONTAINER_NAME } else { Write-Host "容器不存在" }

          Write-Host "运行容器..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP --restart unless-stopped $IMAGE_TAG || { Write-Host "启动失败"; exit 1 }
          Write-Host "启动成功"

          Write-Host "检查状态..."
          Start-Sleep -Seconds 10
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
            Write-Host "容器未运行，状态: $status"
            Write-Host "容器日志:"
            docker logs $CONTAINER_NAME
            exit 1
          }
          Write-Host "状态: $status"

          Write-Host "清理未使用镜像..."

          Write-Host "--- 部署完成 ---"

  deploy-service-order:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 调试：检查环境和保存脚本
        shell: pwsh
        run: |
          Write-Host "工作目录: $PWD"
          Write-Host "PowerShell 版本: $($PSVersionTable.PSVersion)"

      - name: 拉取并运行 Service Order Docker 镜像
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-order:${{ env.IMAGE_TAG }}"
          $CONTAINER_NAME = "cloud-demo-order-container"
          $PORT_MAP = "8009:8080"

          Write-Host "--- 部署 Service Order ---"
          Write-Host "镜像: $IMAGE_TAG"
          Write-Host "容器: $CONTAINER_NAME"
          Write-Host "端口: $PORT_MAP"

          Write-Host "拉取镜像..."
          docker pull $IMAGE_TAG || { Write-Host "拉取失败"; exit 1 }
          Write-Host "拉取成功"

          Write-Host "检查容器..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists -eq $CONTAINER_NAME) { docker stop $CONTAINER_NAME; docker rm $CONTAINER_NAME } else { Write-Host "容器不存在" }

          Write-Host "运行容器..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP --restart unless-stopped $IMAGE_TAG || { Write-Host "启动失败"; exit 1 }
          Write-Host "启动成功"

          Write-Host "检查状态..."
          Start-Sleep -Seconds 10
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
            Write-Host "容器未运行，状态: $status"
            Write-Host "容器日志:"
            docker logs $CONTAINER_NAME
            exit 1
          }
          Write-Host "状态: $status"

          Write-Host "清理未使用镜像..."

          Write-Host "--- 部署完成 ---"

  deploy-service-product:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 调试：检查环境和保存脚本
        shell: pwsh
        run: |
          Write-Host "工作目录: $PWD"
          Write-Host "PowerShell 版本: $($PSVersionTable.PSVersion)"

      - name: 拉取并运行 Service Product Docker 镜像
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-product:${{ env.IMAGE_TAG }}"
          $CONTAINER_NAME = "cloud-demo-product-container"
          $PORT_MAP = "9000:8080"

          Write-Host "--- 部署 Service Product ---"
          Write-Host "镜像: $IMAGE_TAG"
          Write-Host "容器: $CONTAINER_NAME"
          Write-Host "端口: $PORT_MAP"

          Write-Host "拉取镜像..."
          docker pull $IMAGE_TAG || { Write-Host "拉取失败"; exit 1 }
          Write-Host "拉取成功"

          Write-Host "检查容器..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists -eq $CONTAINER_NAME) { docker stop $CONTAINER_NAME; docker rm $CONTAINER_NAME } else { Write-Host "容器不存在" }

          Write-Host "运行容器..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP --restart unless-stopped $IMAGE_TAG || { Write-Host "启动失败"; exit 1 }
          Write-Host "启动成功"

          Write-Host "检查状态..."
          Start-Sleep -Seconds 10
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
            Write-Host "容器未运行，状态: $status"
            Write-Host "容器日志:"
            docker logs $CONTAINER_NAME
            exit 1
          }
          Write-Host "状态: $status"

          Write-Host "清理未使用镜像..."

          Write-Host "--- 部署完成 ---"