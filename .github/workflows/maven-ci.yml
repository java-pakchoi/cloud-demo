name: Maven Multi-Service Docker CI/CD

on:
  push:
    branches:
      - main
  #pull_request:
   # branches:
    #  - main

env:
  # 镜像仓库地址
  REGISTRY: ghcr.io
  # 仓库拥有者（GitHub 用户名或组织名）
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # 需要写入 GitHub 容器注册表的权限

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven # 缓存 Maven 依赖

      # 可选：运行测试以确保代码质量（取消注释以启用）
      # - name: 运行单元测试
      #   run: mvn -B test --file pom.xml

      - name: 构建所有服务
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true # 跳过测试以加快构建

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建并推送 Gateway Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: gateway/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/gateway:${{ github.sha }}
          cache-from: type=gha,scope=gateway-build
          cache-to: type=gha,scope=gateway-build,mode=max

      - name: 构建并推送 Service Order Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: services/service-order/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-order:${{ github.sha }}
          cache-from: type=gha,scope=service-order-build
          cache-to: type=gha,scope=service-order-build,mode=max

      - name: 构建并推送 Service Product Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: services/service-product/
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-product:${{ github.sha }}
          cache-from: type=gha,scope=service-product-build
          cache-to: type=gha,scope=service-product-build,mode=max

  deploy-gateway:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push' # 仅在 push 时部署，PR 不部署
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 拉取并运行 Gateway Docker 镜像
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/gateway:${{ github.sha }}"
          $CONTAINER_NAME = "cloud-demo-gateway-container"
          $PORT_MAP = "8080:80"

          Write-Host "--- 开始部署 Gateway 服务 ---"
          Write-Host "镜像标签: $IMAGE_TAG"
          Write-Host "容器名称: $CONTAINER_NAME"
          Write-Host "端口映射: $PORT_MAP"

          # 拉取镜像
          Write-Host "正在拉取 Docker 镜像..."
          docker pull $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "拉取镜像失败"
              exit 1
          }
          Write-Host "镜像拉取成功"

          # 停止并移除现有容器
          Write-Host "检查容器 '$CONTAINER_NAME'..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists) {
              Write-Host "停止容器 '$CONTAINER_NAME'..."
              docker stop $CONTAINER_NAME
              Write-Host "移除容器 '$CONTAINER_NAME'..."
              docker rm $CONTAINER_NAME
          } else {
              Write-Host "容器 '$CONTAINER_NAME' 不存在"
          }

          # 运行新容器
          Write-Host "正在运行新容器 '$CONTAINER_NAME'..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "启动容器失败"
              exit 1
          }
          Write-Host "新容器已成功启动"

          # 检查容器状态
          Write-Host "检查容器状态..."
          Start-Sleep -Seconds 5 # 等待容器启动
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
              Write-Host "容器 '$CONTAINER_NAME' 未正常运行，状态: $status"
              exit 1
          }
          Write-Host "容器状态: $status"

          Write-Host "--- Gateway 服务部署完成 ---"
          Write-Host "请使用 'docker ps' 命令检查容器状态。"

  deploy-service-order:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 拉取并运行 Service Order Docker 镜像
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-order:${{ github.sha }}"
          $CONTAINER_NAME = "cloud-demo-order-container"
          $PORT_MAP = "8080:8009"

          Write-Host "--- 开始部署 Service Order 服务 ---"
          Write-Host "镜像标签: $IMAGE_TAG"
          Write-Host "容器名称: $CONTAINER_NAME"
          Write-Host "端口映射: $PORT_MAP"

          # 拉取镜像
          Write-Host "正在拉取 Docker 镜像..."
          docker pull $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "拉取镜像失败"
              exit 1
          }
          Write-Host "镜像拉取成功"

          # 停止并移除现有容器
          Write-Host "检查容器 '$CONTAINER_NAME'..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists) {
              Write-Host "停止容器 '$CONTAINER_NAME'..."
              docker stop $CONTAINER_NAME
              Write-Host "移除容器 '$CONTAINER_NAME'..."
              docker rm $CONTAINER_NAME
          } else {
              Write-Host "容器 '$CONTAINER_NAME' 不存在"
          }

          # 运行新容器
          Write-Host "正在运行新容器 '$CONTAINER_NAME'..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "启动容器失败"
              exit 1
          }
          Write-Host "新容器已成功启动"

          # 检查容器状态
          Write-Host "检查容器状态..."
          Start-Sleep -Seconds 5
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
              Write-Host "容器 '$CONTAINER_NAME' 未正常运行，状态: $status"
              exit 1
          }
          Write-Host "容器状态: $status"

          Write-Host "--- Service Order 服务部署完成 ---"
          Write-Host "请使用 'docker ps' 命令检查容器状态。"

  deploy-service-product:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 拉取并运行 Service Product Docker 镜像
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          $IMAGE_TAG = "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/cloud-demo/service-product:${{ github.sha }}"
          $CONTAINER_NAME = "cloud-demo-product-container"
          $PORT_MAP = "8080:9000"

          Write-Host "--- 开始部署 Service Product 服务 ---"
          Write-Host "镜像标签: $IMAGE_TAG"
          Write-Host "容器名称: $CONTAINER_NAME"
          Write-Host "端口映射: $PORT_MAP"

          # 拉取镜像
          Write-Host "正在拉取 Docker 镜像..."
          docker pull $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "拉取镜像失败"
              exit 1
          }
          Write-Host "镜像拉取成功"

          # 停止并移除现有容器
          Write-Host "检查容器 '$CONTAINER_NAME'..."
          $containerExists = docker ps -a --filter "name=$CONTAINER_NAME" --format "{{.Names}}"
          if ($containerExists) {
              Write-Host "停止容器 '$CONTAINER_NAME'..."
              docker stop $CONTAINER_NAME
              Write-Host "移除容器 '$CONTAINER_NAME'..."
              docker rm $CONTAINER_NAME
          } else {
              Write-Host "容器 '$CONTAINER_NAME' 不存在"
          }

          # 运行新Fog: 运行新容器
          Write-Host "正在运行新容器 '$CONTAINER_NAME'..."
          docker run -d --name $CONTAINER_NAME -p $PORT_MAP $IMAGE_TAG
          if ($LASTEXITCODE -ne 0) {
              Write-Host "启动容器失败"
              exit 1
          }
          Write-Host "新容器已成功启动"

          # 检查容器状态
          Write-Host "检查容器状态..."
          Start-Sleep -Seconds 5
          $status = docker ps --filter "name=$CONTAINER_NAME" --format "{{.Status}}"
          if ($status -notlike "*Up*") {
              Write-Host "容器 '$CONTAINER_NAME' 未正常运行，状态: $status"
              exit 1
          }
          Write-Host "容器状态: $status"

          Write-Host "--- Service Product 服务部署完成 ---"
          Write-Host "请使用 'docker ps' 命令检查容器状态。"